name: Pull Request

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  NAME: gfp

jobs:
  cancel-prev-runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  view-context:
    # https://docs.github.com/en/actions/learn-github-actions/contexts
    name: View GitHub Context
    runs-on: ubuntu-latest
    steps:
      - name: Echo GitHub context
        uses: satackey/action-js-inline@v0.0.2
        with:
          script: |
            const github = require('@actions/github');
            console.log(JSON.stringify(github, null, 2));

  build-backend:
    name: Backend Image Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache-dir-backend
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache-backend # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir-backend.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache for test results
        id: cache-backend
        uses: actions/cache@v3
        with:
          path: coverage
          key: backend-coverage-${{ github.run_number }}
          restore-keys: |
            backend-coverage-

      - name: Tests
        run: |
          npm ci
          npm run test:cov

      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Backend coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  deploy-dev:
    name: DEV Deployment
    needs:
      - build-backend
      - tests-backend
    if: always() && (needs.build-backend.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: dev
    env:
      DOMAIN: apps.silver.devops.gov.bc.ca
      ZONE: ${{ github.event.number }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Process and apply template
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-backend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w

      - name: Deployment Verification
        env:
          LINKS: (
            'https://${{ env.NAME }}-${{ github.event.number }}-backend.${{ env.DOMAIN }}'
            )
        run: |
          LINKS=${{ env.LINKS }}
          for l in "${LINKS[@]}"; do
              if [ $(curl -L -s -o /dev/null -w "%{http_code}" "${l}") -ne 200 ]
              then
                  echo "Status != 200 for ${l}"
                  exit 1
              fi
          done

          echo "Deployment verification successful"

      - name: DEV Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            DEV deployments have completed successfully!

            [Backend](https://${{ env.NAME }}-${{ github.event.number }}-backend.${{ env.DOMAIN }}/) available